一、堆排序
1、介绍：
    堆是一棵完全二叉树，堆排序是一种树形选择排序方法，在排序的过程中，将array数组看成是一棵完全二叉树的顺序存储结构，
假设某个元素序号为i（i为从0到n-1），如果它有左子树，左子树的位置是2i+1；如果它有右子树，右子树的位置是2i+2，如果有
父节点，父节点的位置是(i-1)/2。
2、大顶堆和小顶堆：
    大顶堆具有两个性质 —> 根节点的值最大；任意一个节点都不小于它的两个子节点
    小顶堆具有两个性质 —> 根节点的值最小；任意一个节点都不大于它的两个子节点
3、基本思想和步骤：
    以大顶堆举例：将待排序的序列构造成一个大顶堆，此时整个序列的最大值就是堆顶的根节点，将它与末尾元素互换，此时末尾元素
就是最大值，然后将剩余的n-1个序列重新构造成一个大顶堆，这样就会得到n个元素的次大值，执行循环能得到有序序列。
    要解决的两个问题：①将一个无序序列构成一个大顶堆 ②输出堆顶元素后，调整剩余元素成为一个新堆。
4、时间复杂度：
    堆排序的运行时间主要耗费在初始构建堆和在重建堆时反复筛选上。初始构建堆时，完全二叉树从最下层最右边的非终端节点开始
构建，将其与孩子进行比较和必要的互换，对于每个非终端节点来说，最多进行两次比较和互换操作（相当于每个孩子比较了一次），
因此整个构建堆的时间复杂度为o(n)。重建堆时，比较节点和它的孩子left(i)、right(i)，选出三者最大（或者最小）者，做相应的
交换，然后递归进行。循环n-1次，每次都是从根节点往下查找，每次时间是logn，总时间复杂度为o(nlogn)。
5、空间复杂度：
    堆排序是就地排序，不需要额外的存储空间，在排序中只存在1个元素的互换，所以空间复杂度为o(1)。
6、堆排序的问题：在海量数据分析中，从n个数中取前k大的数（Top k问题）

    有两种方法，第一种是建小顶堆，维护一个容量为k的小顶堆，时间复杂度为o(nlogk)；第二种是建大顶堆，维护一个容量为n的
大顶堆，调整k次，时间复杂度为o(klogn)。在数据规模比较小的时候，用大顶堆会比较快，但是在数据量比较大的时候，例如海量数据
下，因为小顶堆需要维护的空间要小，所以速度还是要快一些；而且堆排序是内排序，在内存里面进行，数据量特别大的时候不可能全部
放到内存里面来进行排序。
    https://www.cnblogs.com/qlky/p/7512199.html
